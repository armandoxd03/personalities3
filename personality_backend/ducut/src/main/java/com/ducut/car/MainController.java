package com.ducut.car;

import org.springframework.data.repository.CrudRepository;

import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/ducut") // This means URL's start with /ducut (after Application path)
public class MainController {

    @Autowired // This means to get the bean called carRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CarRepository carRepository;

    /*
        URI: /<yoursurname>/all
        METHOD: GET none
        Action: Retrieve all cars
        Response: Cars list (json)
    */
    @GetMapping(path = "/all")
    public @ResponseBody Iterable<Car> getAllCars() {
        // This returns a JSON or XML with the cars
        return carRepository.findAll();
    }

    /*
        URI: /<yoursurname>/new
        METHOD: POST
        Params:
            String brand
            String model
            String body
            String price
        Action: Add a new car
        Response: "Success adding new car"
    */
    @PostMapping(path="/new") // Map ONLY POST Requests
    public @ResponseBody String addNewCar (
            @RequestParam String brand,
            @RequestParam String model,
            @RequestParam String body,
            @RequestParam String price) {

        Car car = new Car();
        car.setBrand(brand);
        car.setModel(model);
        car.setBody(body);
        car.setPrice(price);
        carRepository.save(car);
        return "Success adding new car";
    }

    /*
        URI: /<yoursurname>/{id}
        METHOD: PUT
        Params:
            {id}
            String brand
            String model
            String body
            String price
        Action: Edit a car based on id
        Response: "Success editing car"
    */
    @PutMapping(path = "/{id}")
    public @ResponseBody String editCar(
            @PathVariable Integer id,
            @RequestParam String brand,
            @RequestParam String model,
            @RequestParam String body,
            @RequestParam String price) {

        Optional<Car> optionalCar = carRepository.findById(id);

        if (optionalCar.isPresent()) {
            Car car = optionalCar.get();
            car.setBrand(brand);
            car.setModel(model);
            car.setBody(body);
            car.setPrice(price);

            carRepository.save(car);
            return "Success editing car";
        } else {
            return "Empty";
        }
    }

    /*
        URI: /<yoursurname>/{id}
        METHOD: DELETE
        Params: {id}
        Action: Delete a car base on id
        Response: "Success deleting car""
    */
    @DeleteMapping(path = "/{id}")
    public @ResponseBody String deleteCar(@PathVariable Integer id) {
        Optional<Car> optionalCar = carRepository.findById(id);

        if (optionalCar.isPresent()) {
            carRepository.delete(optionalCar.get());
            return  " Success deleting car" ;
        } else {
            return "Empty";
        }
    }

    /*
     URI: /<yoursurname>/{id}
     METHOD: GET
     Params:{id}
     Action: Get a car by id
     Response: Cars list (json) or empty
 */
    @GetMapping(path = "/{id}")
    public @ResponseBody Object getCarById(@PathVariable Integer id) {
        Optional<Car> optionalCar = carRepository.findById(id);

        if (optionalCar.isPresent()) {
            return optionalCar.get();
        } else {
            return "Empty";
        }
    }




    /*
        URI: /<yoursurname>/search
        METHOD: GET
        Action: Get cars that contain key in brand, model, or body
        Response: Cars list (json) or empty
    */
    @GetMapping(path = "/search")
    public @ResponseBody Object searchCars(@RequestParam String key) {
        Iterable<Car> allCars = carRepository.findAll();
        List<Car> matchingCars = new ArrayList<>();

        for (Car car : allCars) {
            if (car.getBrand().toLowerCase().contains(key.toLowerCase()) ||
                    car.getModel().toLowerCase().contains(key.toLowerCase()) ||
                    car.getBody().toLowerCase().contains(key.toLowerCase())) {
                matchingCars.add(car);
            }
        }

        if (!matchingCars.isEmpty()) {
            return matchingCars;
        } else {
            return "Empty";
        }
    }



}