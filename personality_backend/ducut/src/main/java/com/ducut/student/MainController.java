package com.ducut.student;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/ducut") // This means URL's start with /ducut (after Application path)
public class MainController {

    @Autowired // This means to get the bean called studentRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private StudentRepository studentRepository;

    /*
        URI: /<yoursurname>/students
        METHOD: GET none
        Action: Retrieve all students
        Response: Student list (json)
    */
    @GetMapping(path = "/students")
    public @ResponseBody Iterable<Student> getAllStudents() {
        // This returns a JSON or XML with the students
        return studentRepository.findAll();
    }

    /*
        URI: /<yoursurname>/{id}
        METHOD: GET
        Params: {id}
        Action: Retrieve student by id
        Response: Student (json)
    */
    @GetMapping(path = "/{id}")
    public @ResponseBody Object getStudentById(@PathVariable Integer id) {
        Optional<Student> optionalStudent = studentRepository.findById(id);

        if (optionalStudent.isPresent()) {
            return optionalStudent.get();
        } else {
            return "Empty";
        }
    }

    /*
        URI: /<yoursurname>/add
        METHOD: POST
        Params:
            String firstname
            String surname
            String course
            String studentnumber
        Action: Add a new student
        Response: "Success registering new student"
    */
    @PostMapping(path = "/add")
    public @ResponseBody String addNewStudent(
            @RequestParam String firstname,
            @RequestParam String surname,
            @RequestParam String course,
            @RequestParam String studentnumber) {

        Student student = new Student();
        student.setFirstname(firstname);
        student.setSurname(surname);
        student.setCourse(course);
        student.setStudentnumber(studentnumber);
        studentRepository.save(student);
        return "Success registering new student";
    }

    /*
        URI: /<yoursurname>/{id}
        METHOD: PUT
        Params:
            {id}
            String firstname
            String surname
            String course
            String studentnumber
        Action: Update student based on ID
        Response: "Success updating student"
    */
    @PutMapping(path = "/{id}")
    public @ResponseBody String editStudent(
            @PathVariable Integer id,
            @RequestParam String firstname,
            @RequestParam String surname,
            @RequestParam String course,
            @RequestParam String studentnumber) {

        Optional<Student> optionalStudent = studentRepository.findById(id);

        if (optionalStudent.isPresent()) {
            Student student = optionalStudent.get();
            student.setFirstname(firstname);
            student.setSurname(surname);
            student.setCourse(course);
            student.setStudentnumber(studentnumber);
            studentRepository.save(student);
            return "Success updating student";
        } else {
            return "Empty";
        }
    }

    /*
        URI: /<yoursurname>/{id}
        METHOD: DELETE
        Params: {id}
        Action: Delete student based on ID
        Response: "Success deleting student"
    */
    @DeleteMapping(path = "/{id}")
    public @ResponseBody String deleteStudent(@PathVariable Integer id) {
        Optional<Student> optionalStudent = studentRepository.findById(id);

        if (optionalStudent.isPresent()) {
            studentRepository.delete(optionalStudent.get());
            return "Success deleting student";
        } else {
            return "Empty";
        }
    }

    /*
/*
    URI: /<yoursurname>/search
    METHOD: GET
    Params: String key
    Action: Retrieve students based on key if found in firstname, surname, course, or student number
    Response: Student list (json)
*/
    @GetMapping(path = "/search")
    public @ResponseBody Object searchStudents(@RequestParam String key) {
        Iterable<Student> allStudents = studentRepository.findAll();
        List<Student> matchingStudents = new ArrayList<>();

        for (Student student : allStudents) {
            if (student.getFirstname().toLowerCase().contains(key.toLowerCase()) ||
                    student.getSurname().toLowerCase().contains(key.toLowerCase()) ||
                    student.getCourse().toLowerCase().contains(key.toLowerCase()) ||
                    student.getStudentnumber().toLowerCase().contains(key.toLowerCase())) {
                matchingStudents.add(student);
            }
        }

        if (!matchingStudents.isEmpty()) {
            return matchingStudents;
        } else {
            return "Empty";
        }
    }
}